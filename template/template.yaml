# # Define the name of the GitHub Action workflow
# name: Manage EKS Cluster
# # This workflow is manually triggered using the GitHub Actions UI
# on:
#   workflow_dispatch:
#     # Define inputs that are required for the manual trigger
#     inputs:
#       clusterName:
#         description: 'Name of the EKS cluster'  # What's this input for?
#         required: true  # Is it optional or required?
#       awsRegion:
#         description: 'AWS Region for the cluster'
#         required: true
#       action:
#         description: 'Action to perform (apply/destroy)'
#         required: true
# # Define jobs to be executed in this workflow
# jobs:
#   # Job for applying (creating or updating) the EKS cluster
#   apply_cluster:
#     # Use the latest Ubuntu runner
#     runs-on: ubuntu-latest
    
#     # Only run this job if the action input is "apply"
#     if: ${{ github.event.inputs.action == 'apply' }}
#     # Define the steps for this job
#     steps:
    
#     # Step to checkout the code from the repository
#     - name: Checkout code
#       uses: actions/checkout@v2
      
#     # Step to setup Terraform CLI
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}  # GitHub secret for Terraform Cloud API token
      
#     # Initialize Terraform (downloads providers, etc.)
#     - name: Terraform Init
#       run: terraform init
#       working-directory: Terraform  # Where should this command be run?
      
#     # Step to format Terraform code, ensures it's neat
#     - name: Terraform Format
#       run: terraform fmt
#       working-directory: Terraform
      
#     # Step to validate the Terraform code (syntax, values, etc.)
#     - name: Terraform Validate
#       run: terraform validate
#       working-directory: Terraform
      
#     # Step to apply the Terraform plan
#     - name: Terraform Apply
#       run: terraform apply -var clusterName=${{ github.event.inputs.clusterName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -auto-approve
#       working-directory: Terraform

#   # Job for destroying the EKS cluster
#   destroy_cluster:
#     runs-on: ubuntu-latest
    
#     # Only run this job if the action input is "destroy"
#     if: ${{ github.event.inputs.action == 'destroy' }}
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2
      
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
#     - name: Terraform Init
#       run: terraform init
#       working-directory: Terraform
      
#     - name: Terraform FMT
#       run: terraform fmt
#       working-directory: Terraform
      
#     - name: Terraform Validate
#       run: terraform validate
#       working-directory: Terraform
      
#     # Step to destroy all resources defined in Terraform
#     - name: Terraform Destroy
#       run: terraform destroy -var clusterName=${{ github.event.inputs.clusterName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -auto-approve
#       working-directory: Terraform
# Define the API version and kind of resource

apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# Template metadata. Here's your intro to what this template does.
metadata:
  name: gke-cluster
  title: Node.js App on GCP GKE Cluster
  description: Deploy a Node.js App on GCP GKE Cluster using Terraform
# The specification for how the template behaves
spec:
  # Who owns this template. Generally, it could be a team or individual
  owner: user:guest
  # The type of service this template deploys
  type: service
  # User-input parameters. Makes your templates dynamic!
  parameters:
    # Ask the user to input some basic app details
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: App Name
          type: string
          description: Unique name for your app
          ui:autofocus: true  # This field gets auto-focused in UI
          ui:options:
            rows: 5  # Number of rows in the input area
    # Ask the user where they want to store the code
    - title: Choose a Repo location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker  # A special UI component for selecting repo URLs
          ui:options:
            allowedHosts:
              - github.com  # Allowed hosts for repository
    # Parameters for setting up the GKE cluster
    - title: Basic GKE Cluster Configuration
      required:
        - clusterName
        - region
        - project
        - action
      properties:
        clusterName:
          title: Cluster Name
          type: string
          description: The name of your GKE cluster
          ui:autofocus: true
        region:
          title: GCP Region
          type: string
          description: The GCP region where the cluster will be deployed
          enum:
            - us-central1
            - us-east1
            - us-west1
        project:
          title: GCP Project ID
          type: string
          description: Your GCP Project ID
        action:
          title: Action
          type: string
          description: Action to perform (apply/destroy)
          enum:
            - apply
            - destroy
  # Steps that the template will execute in order
  steps:
    # Fetch the base template
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content  # Where the base content is stored
        values:
          name: ${{ parameters.name }}
    # Publish the code to a GitHub repo
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
    # Trigger a GitHub Action to set up the GKE cluster
    - id: github-action
      name: Trigger GitHub Action
      action: github:actions:dispatch
      input:
        workflowId: manage-gke-cluster.yml  # GitHub Action workflow ID
        repoUrl: 'github.com?repo=gcp-gke&amp;owner=samgabrail'
        branchOrTagName: 'main'  # The branch to run this action on
        workflowInputs:
          clusterName: ${{ parameters.clusterName }}
          gcpRegion: ${{ parameters.region }}
          gcpProject: ${{ parameters.project }}
          action: ${{ parameters.action }}
    # Register the new component in the Backstage catalog
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'  # Where the catalog info is stored
  # Output links to the user after the template execution
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
